(function () {
  'use strict';

  function styleInject(css, ref) {
    if ( ref === void 0 ) ref = {};
    var insertAt = ref.insertAt;

    if (!css || typeof document === 'undefined') { return; }

    var head = document.head || document.getElementsByTagName('head')[0];
    var style = document.createElement('style');
    style.type = 'text/css';

    if (insertAt === 'top') {
      if (head.firstChild) {
        head.insertBefore(style, head.firstChild);
      } else {
        head.appendChild(style);
      }
    } else {
      head.appendChild(style);
    }

    if (style.styleSheet) {
      style.styleSheet.cssText = css;
    } else {
      style.appendChild(document.createTextNode(css));
    }
  }

  var css_248z = "*{box-sizing:border-box}body,html{height:100%;margin:0;overflow:hidden;padding:0;width:100%}.style-module_speecher__ZAYi-{font-family:Inter var,Inter,-apple-system,\"system-ui\",system-ui,Segoe UI,Roboto,Helvetica Neue,Ubuntu,sans-serif}body{align-items:center;background-color:#fff;display:flex;flex-direction:column;justify-content:center;margin:0;overflow:hidden;padding:1rem}.style-module_button__jq3AX{background-color:#3c92dc;border:1px solid #266ebd;border-radius:3px;color:#fff;cursor:pointer;font-size:.7rem;margin:.3rem;padding:4px;pointer-events:all;width:80px}.style-module_button__jq3AX:hover{background-color:#3282ce;border:1px solid #1f60ae}.style-module_row__H2sPc{display:flex}.style-module_title__Hei5S{font-size:.9rem}.style-module_err__g8zge,.style-module_title__Hei5S{align-items:center;display:flex;flex-direction:column;justify-content:center;pointer-events:none;text-align:center;-webkit-user-select:none;-moz-user-select:none;user-select:none}.style-module_err__g8zge{background-color:hsla(0,0%,100%,.7);font-size:.7rem;height:100%;left:0;position:absolute;top:0;width:100%}.style-module_active__ssQXz{opacity:1;pointer-events:all}.style-module_inactive__gXEdI{opacity:.5;pointer-events:none}";
  var css = {"speecher":"style-module_speecher__ZAYi-","button":"style-module_button__jq3AX","row":"style-module_row__H2sPc","title":"style-module_title__Hei5S","err":"style-module_err__g8zge","active":"style-module_active__ssQXz","inactive":"style-module_inactive__gXEdI"};
  styleInject(css_248z);

  var version = "0.0.8";

  const Ret = window.Retool;
  let startBtn;
  let stopBtn;
  let errWrapper;
  const errors = {
    'not-allowed': 'You need to allow "Microphone" and "Storage and cookies" in Custom Component panel.',
    'no-speech': 'Stop due no speech around.'
  };
  const buildUI = model => {
    console.log('buildUI', model);
    document.body.classList.add(css.speecher);
    const titleWrapper = document.createElement('div');
    titleWrapper.classList.add(css.title);
    titleWrapper.innerHTML = 'Speech 2 Text' + ' (' + version + ')';
    document.body.append(titleWrapper);
    const row = document.createElement('div');
    row.classList.add(css.row);
    document.body.append(row);
    startBtn = document.createElement('button');
    startBtn.textContent = 'Start';
    startBtn.classList.add(css.button);
    row.append(startBtn);
    startBtn.addEventListener('click', () => {
      if (!recognition) buildSpeecher(model);
      startSpeecher();
    });
    stopBtn = document.createElement('button');
    stopBtn.textContent = 'Stop';
    stopBtn.classList.add(css.button, css.inactive);
    row.append(stopBtn);
    stopBtn.addEventListener('click', () => {
      stopSpeecher();
    });
    errWrapper = document.createElement('div');
    errWrapper.classList.add(css.err);
    errWrapper.style.visibility = 'hidden';
    document.body.append(errWrapper);
  };
  let inited = false;
  let recognition;
  let paused = false;
  let isError = false;
  const messages = [];
  const cleanBtn = () => {
    startBtn.classList.remove(css.active, css.inactive);
    stopBtn.classList.remove(css.active, css.inactive);
  };
  const buildSpeecher = model => {
    console.log('buildSpeecher');
    const {
      continuous = false,
      interimResults = true,
      lang = 'en-US',
      maxAlternatives = 1,
      keepActive = true
    } = model || {};
    recognition = new webkitSpeechRecognition();
    recognition.continuous = continuous;
    recognition.interimResults = interimResults;
    recognition.lang = lang;
    recognition.maxAlternatives = maxAlternatives;
    recognition.onresult = event => {
      const res = event.results[0];
      const a = res[0];
      const msg = a.transcript.trim();
      if (res.isFinal) {
        messages.push(msg);
        Ret.modelUpdate({
          lastMessage: msg,
          messages
        });
      }
    };
    recognition.onstart = function () {
      console.log('start');
      errWrapper.style.visibility = 'hidden';
      isError = false;
      cleanBtn();
      stopBtn.classList.add(css.active);
      startBtn.classList.add(css.inactive);
    };
    recognition.onerror = function (event) {
      console.warn('error', event.error);
      cleanBtn();
      startBtn.classList.add(css.inactive);
      stopBtn.classList.add(css.inactive);
      errWrapper.style.visibility = 'visible';
      errWrapper.innerHTML = errors[event.error];
      if (event.error === 'no-speech' && keepActive) ; else {
        errWrapper.style.visibility = 'visible';
        isError = true;
      }
    };
    recognition.onend = function () {
      console.log('end', isError);
      if (isError) return;
      cleanBtn();
      startBtn.classList.add(css.active);
      stopBtn.classList.add(css.inactive);
      if (keepActive && !paused) startSpeecher();
    };
  };
  const startSpeecher = () => {
    paused = false;
    recognition.start();
  };
  const stopSpeecher = () => {
    paused = true;
    recognition.stop();
  };
  Ret.subscribe(async model => {
    console.log('RECHART MODEL', model);
    const speechRec = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!speechRec) {
      errWrapper.style.visibility = 'visible';
      errWrapper.innerHTML = 'Your browser is not supported, sorry.';
      return console.log(' no speech ');
    }
    if (!model?.lastMessage && !model?.messages) {
      console.log('model changed from editor');
    }
    if (!inited) {
      buildUI(model || {});
      inited = true;
    }
  });

})();
